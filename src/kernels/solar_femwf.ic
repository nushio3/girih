void femwd_solar( const int shape[3], const int xb, const int yb_r, const int zb, const int xe, const int ye_r, const int ze,
    const real_t * restrict coef, real_t * restrict u,
    real_t * restrict v, const real_t * restrict roc2, int t_dim, int b_inc, int e_inc, int NHALO, int tb, int te, stencil_CTX stencil_ctx, int mtid) {

#pragma omp parallel default(none) shared(stencil_ctx, shape, roc2, coef, mtid, tb, te, t_dim, b_inc, e_inc, NHALO, u) num_threads(stencil_ctx.thread_group_size) PROC_BIND(master)
  {
    int i, j, k, t, yb, ye, zi, kt,kb, ke, nwf, th_nwf, tid, gtid, q, r, tgs, err, ib, ie;
    double t_start;

    tgs = stencil_ctx.thread_group_size;
    nwf = stencil_ctx.num_wf;

    tid = 0;
    gtid = 0;
#if defined(_OPENMP)
    tid = omp_get_thread_num();
    gtid = tid + mtid * tgs;
#endif

    if(stencil_ctx.use_manual_cpu_bind == 1){
      err = sched_setaffinity(0, stencil_ctx.setsize, stencil_ctx.bind_masks[mtid*tgs+tid]);
      if(err==-1) printf("WARNING: Could not set CPU Affinity\n");
    }


    int th_c = stencil_ctx.th_c;
    int th_x = stencil_ctx.th_x;
    int th_z = stencil_ctx.th_z;

    // tid = tid_z*(th_c*th_x) + tid_x*th_c + tid_c
    int tid_c = tid%th_c;
    int tid_x = (tid/th_c)%th_x;
    int tid_z = tid/(th_x*th_c);


    // Compute the work range of the thread along the x-axis
    int nbx = (xe-xb)/th_x;
    q = (int)((xe-xb)/th_x);
    r = (xe-xb)%th_x;
    if(tid_x < r) {
      ib = xb + tid_x * (q+1);
      ie = ib + (q+1);
    }else {
      ib = xb + r * (q+1) + (tid_x - r) * q;
      ie = ib + q;
    }


    // Set the components to update based on threads/cell
    int exy=0, exz=0, eyx=0, eyz=0, ezx=0, ezy=0;
    int hxy=0, hxz=0, hyx=0, hyz=0, hzx=0, hzy=0;
    switch(th_c){
      case 1:
        exy=1; exz=1; eyx=1; eyz=1; ezx=1; ezy=1;
        hxy=1; hxz=1; hyx=1; hyz=1; hzx=1; hzy=1;
        break;

      case 2:
        if(tid_c==0){
          exy=1; ezx=1; ezy=1;
          hxz=1; hyx=1; hyz=1;
        } else if(tid_c==1){
          exz=1; eyx=1; eyz=1;
          hxy=1; hzx=1; hzy=1;
        }
        break;

      case 3:
        if(tid_c==0){
          exy=1; ezy=1;
          hyx=1; hzx=1;
        } else if(tid_c==1){
          exz=1; eyz=1;
          hxy=1; hzy=1;
        } else if(tid_c==2){
          eyx=1; ezx=1;
          hxz=1; hyz=1;
        }
        break;

      case 6:
       if     (tid_c==0){ exy=1; hyx=1;}
       else if(tid_c==1){ ezy=1; hzx=1;}
       else if(tid_c==2){ exz=1; hxy=1;}
       else if(tid_c==3){ eyz=1; hzy=1;}
       else if(tid_c==4){ eyx=1; hxz=1;}
       else if(tid_c==5){ ezx=1; hyz=1;}
       break;
    }
 

    th_nwf = nwf/th_z;

//      printf("[%d, %d] bs_x:%d  xb:%d  xe:%d  ib_r:%03d  ie_r:%03d  ib:%03d  ie:%03d\n", gtid, tid, bs_x, xb, xe, ib_r, ie_r, ib, ie);
    for(zi=zb; zi<ze; zi+=nwf) { // wavefront loop (Z direction)

      if(ze-zi < nwf){ 
        nwf = ze-zi;
      }

      yb = yb_r;
      ye = ye_r;

      kt = zi;
      for(t=tb; t< te; t++){ // Diamond blocking in time
      // kb = kt; 
      // ke = kt+nwf;

        // Update E-field when more than silce available and not first iteration of the prologue
        if( (yb<ye) && (tb==0 | t!=tb)){
          for(k=kt; k<kt+nwf; k++){
            if( ((k-NHALO)/th_nwf)%th_z == tid_z ){
              kb=k;

              ke=kb+1;
              while( (ke<kt+nwf) && (((ke-NHALO)/th_nwf)%th_z == tid_z) )
                ke++;
              k=ke;

              // compute E-field (except at first and last time steps of right-half diamond)
              if(exz) solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CXZ);
              if(eyz) solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CYZ);
              if(eyx) solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CYX);
              if(ezx) solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CZX);
              if(exy) solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CXY);
              if(ezy) solar_e_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CZY);
              // Update block size in Y
            }
          }
        }
        if(t <= t_dim) ye += e_inc; // lower half of the diamond
        else         yb += b_inc; // upper half of the diamond

        t_start = MPI_Wtime();
#pragma omp barrier
        stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start; 
        if( (yb<ye) && (te>(t_dim*2) | t!=te-1) ){ // More than slice available and not epilogue's last time step
          for(k=kt; k<kt+nwf; k++){
            if( ((k-NHALO)/th_nwf)%th_z == tid_z ){
              kb=k;

              ke=kb+1;
              while( (ke<kt+nwf) && (((ke-NHALO)/th_nwf)%th_z == tid_z) )
                ke++;
              k=ke;

              // compute H-field
              if(hyx) solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CYX);
              if(hzx) solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CZX);
              if(hxy) solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CXY);
              if(hzy) solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CZY);
              if(hxz) solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CXZ);
              if(hyz) solar_h_field_kernel_par_comp(shape, ib, yb, kb, ie, ye, ke, coef, u, stencil_ctx, CYZ);
              // Update block size in Y
            }
          }
        }
        if(t < t_dim) yb -= b_inc; // lower half of the diamond
        else         ye -= e_inc; // upper half of the diamond 

        t_start = MPI_Wtime();
#pragma omp barrier
        stencil_ctx.t_wait[gtid] += MPI_Wtime() - t_start;

        kt -= NHALO;
      } // diamond blocking in time (time loop)
    } // wavefront loop
  } // parallel region
}
